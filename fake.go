// Code generated by counterfeiter. DO NOT EDIT.
package ihttp

import (
	"io"
	"net/http"
	"sync"
	"time"
)

type Fake struct {
	ServeContentStub        func(w http.ResponseWriter, req *http.Request, name string, modtime time.Time, content io.ReadSeeker)
	serveContentMutex       sync.RWMutex
	serveContentArgsForCall []struct {
		w       http.ResponseWriter
		req     *http.Request
		name    string
		modtime time.Time
		content io.ReadSeeker
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) ServeContent(w http.ResponseWriter, req *http.Request, name string, modtime time.Time, content io.ReadSeeker) {
	fake.serveContentMutex.Lock()
	fake.serveContentArgsForCall = append(fake.serveContentArgsForCall, struct {
		w       http.ResponseWriter
		req     *http.Request
		name    string
		modtime time.Time
		content io.ReadSeeker
	}{w, req, name, modtime, content})
	fake.recordInvocation("ServeContent", []interface{}{w, req, name, modtime, content})
	fake.serveContentMutex.Unlock()
	if fake.ServeContentStub != nil {
		fake.ServeContentStub(w, req, name, modtime, content)
	}
}

func (fake *Fake) ServeContentCallCount() int {
	fake.serveContentMutex.RLock()
	defer fake.serveContentMutex.RUnlock()
	return len(fake.serveContentArgsForCall)
}

func (fake *Fake) ServeContentArgsForCall(i int) (http.ResponseWriter, *http.Request, string, time.Time, io.ReadSeeker) {
	fake.serveContentMutex.RLock()
	defer fake.serveContentMutex.RUnlock()
	return fake.serveContentArgsForCall[i].w, fake.serveContentArgsForCall[i].req, fake.serveContentArgsForCall[i].name, fake.serveContentArgsForCall[i].modtime, fake.serveContentArgsForCall[i].content
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.serveContentMutex.RLock()
	defer fake.serveContentMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ IHTTP = new(Fake)
