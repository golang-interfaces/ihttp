// This file was generated by counterfeiter
package vhttp

import (
	httpnet "net/http"
	"sync"
)

type Fake struct {
	DoStub        func(req *httpnet.Request) (*httpnet.Response, error)
	doMutex       sync.RWMutex
	doArgsForCall []struct {
		req *httpnet.Request
	}
	doReturns struct {
		result1 *httpnet.Response
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Fake) Do(req *httpnet.Request) (*httpnet.Response, error) {
	fake.doMutex.Lock()
	fake.doArgsForCall = append(fake.doArgsForCall, struct {
		req *httpnet.Request
	}{req})
	fake.recordInvocation("Do", []interface{}{req})
	fake.doMutex.Unlock()
	if fake.DoStub != nil {
		return fake.DoStub(req)
	} else {
		return fake.doReturns.result1, fake.doReturns.result2
	}
}

func (fake *Fake) DoCallCount() int {
	fake.doMutex.RLock()
	defer fake.doMutex.RUnlock()
	return len(fake.doArgsForCall)
}

func (fake *Fake) DoArgsForCall(i int) *httpnet.Request {
	fake.doMutex.RLock()
	defer fake.doMutex.RUnlock()
	return fake.doArgsForCall[i].req
}

func (fake *Fake) DoReturns(result1 *httpnet.Response, result2 error) {
	fake.DoStub = nil
	fake.doReturns = struct {
		result1 *httpnet.Response
		result2 error
	}{result1, result2}
}

func (fake *Fake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.doMutex.RLock()
	defer fake.doMutex.RUnlock()
	return fake.invocations
}

func (fake *Fake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ Client = new(Fake)
